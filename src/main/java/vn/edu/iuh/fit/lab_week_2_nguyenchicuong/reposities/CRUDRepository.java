package vn.edu.iuh.fit.lab_week_2_nguyenchicuong.reposities;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import vn.edu.iuh.fit.lab_week_2_nguyenchicuong.connectDB.ConnectDB;import java.util.List;public class CRUDRepository<T, L extends Number> {    private SessionFactory sessionFactory;    private final Class<T> enityClass;    private static final Logger logger = LoggerFactory.getLogger(CRUDRepository.class);    public CRUDRepository(Class<T> enityClass) {        this.enityClass = enityClass;        sessionFactory = ConnectDB.getInstance().getSessionFactory();    }    public boolean insert(T entity) {        Transaction tr = null;        try (Session session = sessionFactory.openSession()) {            tr = session.beginTransaction();            session.persist(entity);            tr.commit();            return true;        } catch (Exception e) {            if (tr != null) {                tr.rollback();            }            logger.error(e.getMessage());            return false;        }    }    public boolean update(T entity) {        Transaction tr = null;        try (Session session = sessionFactory.openSession()) {            tr = session.beginTransaction();            session.merge(entity);            tr.commit();            return true;        } catch (Exception e) {            if (tr != null) {                tr.rollback();                ;            }            logger.error(e.getMessage());            return false;        }    }    public void delete(long id) {        Session session = sessionFactory.openSession();        Transaction tx = session.beginTransaction();        try {            // Tìm đối tượng cần xóa theo ID            T entity = session.get(enityClass, id);            if (entity != null) {                session.delete(entity);            } else {                System.out.println("Không tìm thấy đối tượng có ID = " + id);            }            tx.commit();        } catch (Exception e) {            if (tx != null) {                tx.rollback();            }            e.printStackTrace();        } finally {//            session.close();//            sessionFactory.close();        }    }    //   public  boolean updateById(long id){//        Transaction tr=null;//        try(Session session=sessionFactory.openSession()){//            tr=session.beginTransaction();//            session.find(enityClass,id);//            session.up//        }catch (){////        }//   }    public List<T> getAll() {        try (Session session = sessionFactory.openSession()) {            return session.createQuery("FROM " + enityClass.getSimpleName(), enityClass).getResultList();        }    }    public T getById(long id) {        try (Session session = sessionFactory.openSession()) {            return session.find(enityClass, id);        }    }}